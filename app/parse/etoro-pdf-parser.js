import { parseNumber, isNegParen } from '../util/currency.js';
import { parseDate } from '../util/date.js';
export function parseEtoroPdf(pages){const text=pages.join('\n');const acct={};function grab(l){const s=l.replace(/[.*+?^${}()|[\]\\]/g,'\\$&');const rx=new RegExp(s+'\\s*\\(?-?([\\d.,]+)\\)?');const m=text.match(rx);if(!m)return null;const raw=m[1];const neg=new RegExp(s+'\\s*\\(([\\d.,]+)\\)').test(text);const val=parseNumber(raw);return neg?-Math.abs(val):val;}acct.deposits=grab('Einzahlungen');acct.refunds=grab('Rückerstattungen');acct.credits=grab('Gutschriften');acct.adjustments=grab('Anpassungen');acct.realized_pnl=grab('Gewinn oder Verlust (nur geschlossene Positionen)');acct.dividends=grab('Dividenden');acct.overnight=grab('Übernachtgebühren');acct.commission=grab('Kommission');acct.stamp_duty=grab('Stempelsteuer-Gebühr');acct.withdrawals=grab('Auszahlungen');acct.withdrawal_fees=grab('Auszahlungsgebühren');acct.fx_fees=grab('Umrechnungsgebühr für Ein-/Auszahlungen');acct.realized_end=grab('Realisiertes Eigenkapital - Ende');const trades=[];const lines=text.split('\n');let inClosed=false,buf=[];for(const ln of lines){if(/Geschlossene Positionen/i.test(ln)){inClosed=true;continue;}if(inClosed&&/(ISIN|Positions-ID|Long|Short)/i.test(ln)){buf.push(ln);continue;}if(inClosed&&/(Dividendenübersicht|Kontoüberblick|Kontoübersicht)/i.test(ln))break;if(inClosed)buf.push(ln);}let current=null;function push(){if(current&&(current.symbol||current.name||current.pnl!==undefined))trades.push(current);}for(const ln of buf){const line=ln.trim();if(/Positions-ID\s*[:#]?\s*[A-Za-z0-9-]+/.test(line)){push();current={fees:0};const idm=line.match(/Positions-ID\s*[:#]?\s*([A-Za-z0-9-]+)/);if(idm)current.position_id=idm[1];continue;}if(!current)continue;if(/\bShort\b/i.test(line))current.side='Short';if(/\bLong\b/i.test(line))current.side=current.side||'Long';if(/ISIN/i.test(line)){const m=line.match(/ISIN\s*([A-Z0-9]{12})/i);if(m)current.isin=m[1].toUpperCase();}if(/\d{2}-\d{2}-\d{4} .*?\d{2}:\d{2}:\d{2}/.test(line)){const parts=line.match(/\d{2}-\d{2}-\d{4} .*?\d{2}:\d{2}:\d{2}/g);if(parts?.length>=1&&!current.opened_at)current.opened_at=parseDate(parts[0]);if(parts?.length>=2)current.closed_at=parseDate(parts[1]);}if(/\([A-Z0-9.\-:/]+\)\s*$/.test(line)&&!current.name){const m=line.match(/^(.*?)\s*\(([A-Z0-9.\-:/]+)\)\s*$/);if(m){current.name=m[1].trim();current.symbol=m[2].trim();}}if(/Einheiten\s*[0-9.,]+/i.test(line)){const m=line.match(/Einheiten\s*([0-9.,]+)/i);if(m)current.units=parseNumber(m[1]);}if(/Eröffnungskurs\s*[0-9.,]+/i.test(line)){const m=line.match(/Eröffnungskurs\s*([0-9.,]+)/i);if(m)current.open_px=parseNumber(m[1]);}if(/Schlusskurs\s*[0-9.,]+/i.test(line)){const m=line.match(/Schlusskurs\s*([0-9.,]+)/i);if(m)current.close_px=parseNumber(m[1]);}if(/Gewinn/i.test(line)){const m=line.match(/Gewinn.*?([-()0-9.,]+)/i);if(m){const raw=m[1].trim();current.pnl=/^\(.*\)$/.test(raw)?-Math.abs(parseNumber(raw)):parseNumber(raw);}}if(/Übernachtgebüh/i.test(line)){const m=line.match(/Übernachtgebüh.*?([-()0-9.,]+)/i);if(m){const raw=m[1].trim();current.fees+=/^\(.*\)$/.test(raw)?-Math.abs(parseNumber(raw)):parseNumber(raw);}}if(/Kommission/i.test(line)){const m=line.match(/Kommission.*?([-()0-9.,]+)/i);if(m){const raw=m[1].trim();current.fees+=/^\(.*\)$/.test(raw)?-Math.abs(parseNumber(raw)):parseNumber(raw);}}if(/Dividenden/i.test(line)){const m=line.match(/Dividenden.*?([-()0-9.,]+)/i);if(m)current.dividends=parseNumber(m[1]);}}push();return {account:acct,trades};}
